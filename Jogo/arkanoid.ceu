#include "sdl.ceu"
#define BALLTIME 60
#define BARTIME 5

input void SDL_REDRAW;
input void SDL_DT;
input void SDL_QUIT;
input _SDL_KeyboardEvent* SDL_KEYDOWN;

var _SDL_Window&? win;
    finalize
        win = _SDL_CreateWindow("Arkanoid",
                            _SDL_WINDOWPOS_UNDEFINED, _SDL_WINDOWPOS_UNDEFINED,
640, 480, _SDL_WINDOW_SHOWN
);
    with
        _SDL_DestroyWindow(win);
    end

native do
    SDL_Renderer* ren;
end
    finalize
        _ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(_ren);
    end

class Ball with
	var _SDL_Rect rec;
	var int xspeed;
	var int yspeed;
	event void collided;
do
	par/or do
		every BALLTIME ms do
			rec.x = rec.x + xspeed;
			rec.y = rec.y + yspeed;
		end
	with
		every SDL_REDRAW do
			if rec.y == 470 then
				_SDL_SetRenderDrawColor(_ren, 0xFF,0x00,0x00,0x00);
			else
				_SDL_SetRenderDrawColor(_ren,0xFF,0xFF,0xFF,0x00);
			end
			_SDL_RenderFillRect(_ren,&rec);
		end
	end
end

class Bar with
	var _SDL_Rect rec;
do
	par do
		var _SDL_KeyboardEvent* key;
		loop do
			await BARTIME ms;
			every key in SDL_KEYDOWN do
				if key:keysym.sym == _SDLK_LEFT then
					if rec.x>0 then
						rec.x = rec.x - 10;
						break;
					end
				else/if key:keysym.sym == _SDLK_RIGHT then
					if rec.x<540 then
						rec.x = rec.x + 10;
						break;
					end
				end
			end
		end
	with
		every SDL_REDRAW do
			_SDL_SetRenderDrawColor(_ren,0xFF,0xFF,0xFF,0x00);
			_SDL_RenderFillRect(_ren,&rec);
		end
	end
end

class Block with
	var _SDL_Rect rec;
	var int color;
	event void destroyed;
do
	par/or do
		await this.destroyed;
	with
		every SDL_REDRAW do
			if color then
				_SDL_SetRenderDrawColor(_ren, 0xFF,0x66,0x00,0x00);
			else
				_SDL_SetRenderDrawColor(_ren, 0xFF,0x99,0x00,0x00);
			end
			_SDL_RenderFillRect(_ren,&rec);
		end
	end
end

par/or do
	every SDL_REDRAW do
		_SDL_SetRenderDrawColor(_ren, 0x00,0x00,0x40,0x00);
		_SDL_RenderFillRect(_ren, null);
	end
with
	await SDL_QUIT;
with
	loop do
		_srand(_time(null));
		var int randnum = (_rand()%55)*10;
		var int blocksDestroyed = 0;
		var int finalMessage;
		var Bar bar;
			bar.rec.w = 100;
			bar.rec.h = 10;
			bar.rec.x = randnum;
			bar.rec.y = 470;
		var Ball ball;
			ball.rec.w = 10;
			ball.rec.h = 10;
			ball.rec.x = randnum;
			ball.rec.y = 420;
			ball.xspeed = 10;
			ball.yspeed = 10;
		pool Block[15] blocks;
			loop i in 15 do
				spawn Block in blocks with
					this.rec.x = 70 + 100*(i%5);
					this.rec.y = 80 + 40*(i/5);
					this.rec.w = 100;
					this.rec.h = 40;
					this.color = i%2;
				end;
			end

		every SDL_DT do
			/* Teste de colisao com as paredes */
			if ball.rec.x <= 0 or ball.rec.x >= 630 then
				ball.xspeed = -ball.xspeed;
			end

			/* Teste de colisao com o teto */
			if ball.rec.y <= 0 then
				ball.yspeed = -ball.yspeed;
			end

			/* Teste de colisao com a barra */
			if ball.rec.y == 460 and ball.rec.x >= bar.rec.x and ball.rec.x <= (bar.rec.x + bar.rec.w) then
				ball.yspeed = -ball.yspeed;
			end

			/* Teste de colisao com o chao */
			if ball.rec.y == 470 then
				ball.xspeed = 0;
				ball.yspeed = 0;
				/* Mensagem de fim de jogo */
				finalMessage = 1;
				break;
			end

			/* Teste de colisao com cada um dos blocos */
			loop b1 in blocks do
				/* Com a parte esquerda do bloco */
				if ball.rec.x + ball.rec.w == b1:rec.x
					and ball.rec.y >= b1:rec.y
					and ball.rec.y + ball.rec.h <= b1:rec.y + b1:rec.h then
						ball.xspeed = -ball.xspeed;
						emit b1:destroyed;
						blocksDestroyed = blocksDestroyed + 1;

				/* Com a parte direita do bloco */			
				else/if ball.rec.x == b1:rec.x + b1:rec.w
					and ball.rec.y >= b1:rec.y
					and ball.rec.y + ball.rec.h <= b1:rec.y + b1:rec.h then
						ball.xspeed = -ball.xspeed;
						emit b1:destroyed;
						blocksDestroyed = blocksDestroyed + 1;

				/* Com a parte superior do bloco */
				else/if ball.rec.y + ball.rec.h == b1:rec.y
					and ball.rec.x >= b1:rec.x
					and ball.rec.x + ball.rec.w <= b1:rec.x + b1:rec.w

					/* Com as duas quinas superiores do bloco */
					or ball.rec.x == b1:rec.x and ball.rec.y == b1:rec.y
					or ball.rec.x == (b1:rec.x + 90) and ball.rec.y == b1:rec.y then
						ball.yspeed = -ball.yspeed;
						emit b1:destroyed;
						blocksDestroyed = blocksDestroyed + 1;

				/* Com a parte inferior do bloco */			
				else/if ball.rec.y == b1:rec.y + b1:rec.h
					and ball.rec.x >= b1:rec.x
					and ball.rec.x + ball.rec.w <= b1:rec.x + b1:rec.w

					/* Com as duas quinas inferiores do bloco */
					or ball.rec.x == b1:rec.x and ball.rec.y == (b1:rec.y + 30)
					or ball.rec.x == (b1:rec.x + 90) and ball.rec.y == (b1:rec.y + 30) then
						ball.yspeed = -ball.yspeed;
						emit b1:destroyed;
						blocksDestroyed = blocksDestroyed + 1;
				end
			end

			/* Testa se todos os blocos foram destruidos para poder terminar o jogo */
			if blocksDestroyed == 15 then
				/* Mensagem de fim de jogo */
				finalMessage = 0;
				break;
			end
		end
		await 50 ms;
		if finalMessage then
			_SDL_ShowSimpleMessageBox(_SDL_MESSAGEBOX_INFORMATION,"Game Over","PERDESTE!",null);
		else
			_SDL_ShowSimpleMessageBox(_SDL_MESSAGEBOX_INFORMATION,"Game Over","GANHASTE!",null);
		end
	end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_ren);
    end
end

escape 0;
